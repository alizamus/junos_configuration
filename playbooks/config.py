#!/usr/bin/python

import sys
import netaddr


if __name__ == '__main__':
	print '<<<<<<<<<< start of configuration >>>>>>>>>>'
	print 'Please enter the IP of the router that you want to run your configuration: '
	router_ip = raw_input()
	print 'Please enter the username for the router: '
	username = raw_input()
	print 'Please enter the password for above user: '
	password = raw_input()
	f = open('config_vars.yml', 'w')
	f.write('router_ip: '+ str(router_ip))	
	f.write('\n')
	f.write('username: '+ str(username))
	f.write('\n')
	f.write('password: '+ password)
	f.close()
	f = open('inventory', 'w')
	f.write('[junos]\n')
	f.write('junos1')
	f.write(' ')
	f.write('ansible_ssh_host=' + router_ip)
	f.write(' ')
	f.write('ansible_ssh_port=22')
	f.write(' ')
	f.write('ansible_ssh_user=' + username)
	f.write(' ')
	f.write('ansible_ssh_pass=' + password)
	f.write(' ')
	f.write('ansible_sudo_pass=' + password)
	f.close()

	print 'Please enter the logical tunnel interface: '
	logical_tunnel_interface = str(raw_input())
	print 'Please enter an unit number for logical tunnel: '
	logical_tunnel_unit = str(raw_input())
	print 'Please enter an ip for logical tunnel interface: '
	logical_tunnel_ip = str(raw_input())
	print 'Please enter the IP fabric address interface: '
	ip_fabric_address_interface = str(raw_input())
	print 'Please enter the datacenter number: '
	dc_num = str(raw_input())

	f = open('test.set', 'w')
	f.write('set groups MTU interfaces <*> mtu 2000')
	f.write('\n')
	f.write('set system apply-groups global')
	f.write('\n')
	f.write('set chassis fpc 0 pic 0 tunnel-services bandwidth 1g')
	f.write('\n')
	f.write('set interfaces apply-groups MTU')
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(logical_tunnel_unit) + ' description "Master Tbl"')
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(logical_tunnel_unit) + ' encapsulation ethernet')
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(logical_tunnel_unit) + ' peer-unit ' + str(int(logical_tunnel_unit)+1))
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(logical_tunnel_unit) + ' family inet address ' + logical_tunnel_ip +'/30')
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(int(logical_tunnel_unit) + 1) + ' description "VRF Tbl"')
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(int(logical_tunnel_unit) + 1) + ' encapsulation ethernet')
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(int(logical_tunnel_unit) + 1) + ' peer-unit ' + str(logical_tunnel_unit))
	f.write('\n')
	f.write('set interfaces ' + logical_tunnel_interface + ' unit ' + str(int(logical_tunnel_unit) + 1) + ' family inet address ' + str(netaddr.IPAddress(int(netaddr.IPAddress(logical_tunnel_ip)+1))) + '/30')
	f.write('\n')
	f.write('set interfaces ' + ip_fabric_address_interface + ' description "IP Fabric IBGP"')
	f.write('\n')
	f.write('set interfaces ' + ip_fabric_address_interface + ' unit 0 family inet address 172.16.' + str(dc_num) + '.13/24')
	f.write('\n')
	f.write('set routing-options static route 10.1.' + str(dc_num) + '.0/24 next-hop ' + str(netaddr.IPAddress(int(netaddr.IPAddress(logical_tunnel_ip)+1))) )
	f.write('\n')
	f.write('set routing-options autonomous-system ' + str( 65000 + int(dc_num)) )
	f.write('\n')
	f.write('set routing-options dynamic-tunnels JUNOSV_CONTRAIL_DC' + str(dc_num) + ' source-address 172.16.' + str(dc_num) + '.13' )
	f.write('\n')
	f.write('set routing-options dynamic-tunnels JUNOSV_CONTRAIL_DC' + str(dc_num) + ' gre')
	f.write('\n')
	f.write('set routing-options dynamic-tunnels JUNOSV_CONTRAIL_DC' + str(dc_num) + ' destination-networks 172.16.' + str(dc_num) + '.0/24')
	f.write('\n')
	f.write('set protocols bgp group IBGP type internal')
	f.write('\n')
	f.write('set protocols bgp group IBGP description "PEER to CONTRAIL Control Nodes"')
	f.write('\n')
	f.write('set protocols bgp group IBGP local-address 172.16.' + str(dc_num) + '.13')
	f.write('\n')
	f.write('set protocols bgp group IBGP family inet unicast')
	f.write('\n')
	f.write('set protocols bgp group IBGP family inet-vpn unicast')
	f.write('\n')
	f.write('set protocols bgp group IBGP peer-as ' + str( 65000 + int(dc_num)))
	f.write('\n')
	f.write('set protocols bgp group IBGP local-as ' + str( 65000 + int(dc_num)))
	f.write('\n')
	f.write('set protocols bgp group IBGP allow 172.16.' + str(dc_num) + '.0/24')
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' description "VRF target from DC' + str(dc_num) + ' VN' + """'""" + 's"')
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' instance-type vrf')
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' interface ' + logical_tunnel_interface + '.' + str(int(logical_tunnel_unit)+1))
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' route-distinguisher 10.100.10.124:' + str(dc_num))
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' vrf-target target:' + str( 65000 + int(dc_num)) + ':' + str( 10000 + int(dc_num)))
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' vrf-table-label')
	f.write('\n')
	f.write('set routing-instances ON-RAMP-DC' + str(dc_num) + ' routing-options static route 0.0.0.0/0 next-hop ' + str(logical_tunnel_ip))
	print '<<<<<<<<<< configuration is done >>>>>>>>>>'
	print '<<<<<<<<<< Now you can run this command: >>>>>>>>>> '
	print '<<<<<<<<<< ansible-playbook junos.yml >>>>>>>>>>'
